'use client'
import React, { useState } from 'react';
import { User, Calendar, Activity, FileText, MessageSquare, Receipt, FileEdit, Menu, X, ChevronRight, Bell } from 'lucide-react';

const ParentDashboard = () => {
  const [selectedChild, setSelectedChild] = useState(null);
  const [activeTab, setActiveTab] = useState('register');
  const [sidebarOpen, setSidebarOpen] = useState(true);

  // Mock data
  const children = [
    { id: 1, name: 'Nguy·ªÖn Minh An', class: '3A', avatar: 'üë¶', allergies: ['ƒê·∫≠u ph·ªông', 'H·∫£i s·∫£n'] },
    { id: 2, name: 'Nguy·ªÖn Thu H√†', class: '1B', avatar: 'üëß', allergies: ['S·ªØa'] }
  ];

  const menuItems = [
    { id: 'register', icon: Calendar, label: 'ƒêƒÉng k√Ω su·∫•t ƒÉn', color: 'text-blue-600' },
    { id: 'profile', icon: User, label: 'C·∫≠p nh·∫≠t h·ªì s∆°', color: 'text-green-600' },
    { id: 'health', icon: Activity, label: 'Theo d√µi s·ª©c kh·ªèe', color: 'text-red-600' },
    { id: 'menu', icon: FileText, label: 'Xem th·ª±c ƒë∆°n', color: 'text-orange-600' },
    { id: 'feedback', icon: MessageSquare, label: 'G√≥p √Ω & Ph·∫£n h·ªìi', color: 'text-purple-600' },
    { id: 'invoice', icon: Receipt, label: 'Xem h√≥a ƒë∆°n', color: 'text-yellow-600' },
    { id: 'leave', icon: FileEdit, label: 'ƒê∆°n xin ngh·ªâ', color: 'text-pink-600' }
  ];

  // Register Meal Component
  const RegisterMeal = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">ƒêƒÉng k√Ω su·∫•t ƒÉn</h2>
      {!selectedChild ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-4">H·ªçc sinh: {selectedChild.name}</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Ch·ªçn th√°ng ƒëƒÉng k√Ω</label>
                <select className="w-full border rounded-lg px-4 py-2">
                  <option>Th√°ng 10/2025</option>
                  <option>Th√°ng 11/2025</option>
                  <option>Th√°ng 12/2025</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">G√≥i ƒëƒÉng k√Ω</label>
                <div className="space-y-3">
                  <label className="flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input type="radio" name="package" className="mr-3" />
                    <div className="flex-1">
                      <p className="font-semibold">G√≥i ƒë·∫ßy ƒë·ªß - 1,200,000 VNƒê/th√°ng</p>
                      <p className="text-sm text-gray-600">Bao g·ªìm: S√°ng, Tr∆∞a, Chi·ªÅu (20 ng√†y)</p>
                    </div>
                  </label>
                  <label className="flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
                    <input type="radio" name="package" className="mr-3" />
                    <div className="flex-1">
                      <p className="font-semibold">G√≥i tr∆∞a - 800,000 VNƒê/th√°ng</p>
                      <p className="text-sm text-gray-600">Ch·ªâ bao g·ªìm: Tr∆∞a (20 ng√†y)</p>
                    </div>
                  </label>
                </div>
              </div>
              <button className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700">
                X√°c nh·∫≠n v√† thanh to√°n
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  // Update Profile Component
  const UpdateProfile = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">C·∫≠p nh·∫≠t h·ªì s∆°</h2>
      <div className="bg-white rounded-lg shadow p-6 space-y-4">
        <h3 className="font-semibold text-lg">Th√¥ng tin ph·ª• huynh</h3>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">H·ªç v√† t√™n</label>
            <input type="text" className="w-full border rounded-lg px-4 py-2" placeholder="Nguy·ªÖn VƒÉn A" />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
            <input type="tel" className="w-full border rounded-lg px-4 py-2" placeholder="0901234567" />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Email</label>
            <input type="email" className="w-full border rounded-lg px-4 py-2" placeholder="email@example.com" />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">ƒê·ªãa ch·ªâ</label>
            <input type="text" className="w-full border rounded-lg px-4 py-2" placeholder="123 ƒê∆∞·ªùng ABC" />
          </div>
        </div>
      </div>

      {selectedChild && (
        <div className="bg-white rounded-lg shadow p-6 space-y-4">
          <h3 className="font-semibold text-lg">Th√¥ng tin con: {selectedChild.name}</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Avatar</label>
              <div className="flex items-center space-x-4">
                <div className="text-6xl">{selectedChild.avatar}</div>
                <button className="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300">Thay ƒë·ªïi</button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">C√°c m√≥n ƒÉn d·ªã ·ª©ng</label>
              <div className="flex flex-wrap gap-2 mb-2">
                {selectedChild.allergies.map((allergy, idx) => (
                  <span key={idx} className="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm">
                    {allergy} <button className="ml-2 font-bold">√ó</button>
                  </span>
                ))}
              </div>
              <input type="text" className="w-full border rounded-lg px-4 py-2" placeholder="Th√™m m√≥n ƒÉn d·ªã ·ª©ng" />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">S·ªü th√≠ch m√≥n ƒÉn</label>
              <textarea className="w-full border rounded-lg px-4 py-2" rows="3" placeholder="Ghi ch√∫ s·ªü th√≠ch..."></textarea>
            </div>
          </div>
        </div>
      )}

      <button className="w-full bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700">
        L∆∞u thay ƒë·ªïi
      </button>
    </div>
  );

  // Track BMI Component
  const TrackBMI = () => {
    const [height, setHeight] = useState('');
    const [weight, setWeight] = useState('');
    const [calculatedBMI, setCalculatedBMI] = useState(null);

    const calculateBMI = () => {
      if (height && weight) {
        const heightInMeters = parseFloat(height) / 100;
        const bmi = (parseFloat(weight) / (heightInMeters * heightInMeters)).toFixed(1);
        setCalculatedBMI(bmi);
      }
    };

    const getBMIStatus = (bmi) => {
      if (bmi < 18.5) return { text: 'Thi·∫øu c√¢n', color: 'text-yellow-600' };
      if (bmi < 25) return { text: 'B√¨nh th∆∞·ªùng', color: 'text-green-600' };
      if (bmi < 30) return { text: 'Th·ª´a c√¢n', color: 'text-orange-600' };
      return { text: 'B√©o ph√¨', color: 'text-red-600' };
    };

    // Mock health data
    const healthData = [
      { month: 'T6', height: 120, weight: 20, bmi: 13.9 },
      { month: 'T7', height: 122, weight: 21, bmi: 14.1 },
      { month: 'T8', height: 123, weight: 21.5, bmi: 14.2 },
      { month: 'T9', height: 125, weight: 22, bmi: 14.1 }
    ];

    return (
      <div className="space-y-6">
        <h2 className="text-2xl font-bold text-gray-800">Theo d√µi s·ª©c kh·ªèe</h2>
        {!selectedChild ? (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="font-semibold mb-4">Ch·ªâ s·ªë hi·ªán t·∫°i - {selectedChild.name}</h3>
              <div className="bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-6 mb-4">
                <div className="grid grid-cols-3 gap-4">
                  <div className="text-center">
                    <p className="text-sm text-gray-600 mb-2">Chi·ªÅu cao</p>
                    <p className="text-3xl font-bold text-blue-600">125 cm</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-gray-600 mb-2">C√¢n n·∫∑ng</p>
                    <p className="text-3xl font-bold text-green-600">22 kg</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-gray-600 mb-2">BMI</p>
                    <p className="text-3xl font-bold text-purple-600">14.1</p>
                    <p className="text-xs text-green-600 font-semibold mt-1">B√¨nh th∆∞·ªùng</p>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-lg border p-4 mb-4">
                <h4 className="font-semibold mb-3">Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng 4 th√°ng g·∫ßn nh·∫•t</h4>
                <div className="space-y-3">
                  {healthData.map((data, idx) => (
                    <div key={idx} className="flex items-center space-x-4">
                      <div className="w-12 text-sm font-semibold text-gray-600">{data.month}</div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 text-sm">
                          <span className="w-20">H: {data.height}cm</span>
                          <span className="w-20">W: {data.weight}kg</span>
                          <span className="w-24">BMI: {data.bmi}</span>
                        </div>
                        <div className="mt-1 bg-gray-200 rounded-full h-2 overflow-hidden">
                          <div 
                            className="bg-gradient-to-r from-blue-500 to-green-500 h-full rounded-full transition-all"
                            style={{ width: `${(data.height / 150) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="border-t pt-4">
                <h4 className="font-semibold mb-3">T√≠nh to√°n BMI</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Chi·ªÅu cao (cm)</label>
                    <input 
                      type="number" 
                      value={height}
                      onChange={(e) => setHeight(e.target.value)}
                      className="w-full border rounded-lg px-4 py-2" 
                      placeholder="125" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">C√¢n n·∫∑ng (kg)</label>
                    <input 
                      type="number"
                      value={weight}
                      onChange={(e) => setWeight(e.target.value)}
                      className="w-full border rounded-lg px-4 py-2" 
                      placeholder="22" 
                    />
                  </div>
                </div>
                
                {calculatedBMI && (
                  <div className="mt-4 bg-blue-50 rounded-lg p-4 text-center">
                    <p className="text-sm text-gray-600 mb-1">Ch·ªâ s·ªë BMI</p>
                    <p className="text-4xl font-bold text-blue-600">{calculatedBMI}</p>
                    <p className={`text-lg font-semibold mt-2 ${getBMIStatus(parseFloat(calculatedBMI)).color}`}>
                      {getBMIStatus(parseFloat(calculatedBMI)).text}
                    </p>
                  </div>
                )}

                <div className="mt-4 bg-gray-50 rounded-lg p-3">
                  <p className="text-sm text-gray-700">
                    <strong className="text-blue-600">C√¥ng th·ª©c BMI:</strong> BMI = C√¢n n·∫∑ng (kg) √∑ [Chi·ªÅu cao (m)]¬≤
                  </p>
                  <p className="text-xs text-gray-600 mt-2">
                    V√≠ d·ª•: C√¢n n·∫∑ng 22kg, chi·ªÅu cao 1.25m ‚Üí BMI = 22 √∑ (1.25)¬≤ = 14.1
                  </p>
                </div>

                <button 
                  onClick={calculateBMI}
                  className="w-full mt-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 font-semibold"
                >
                  T√≠nh BMI
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // View Menu Component
  const ViewMenu = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Xem th·ª±c ƒë∆°n</h2>
      {!selectedChild ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="bg-white rounded-lg shadow p-4">
            <label className="block text-sm font-medium mb-2">Ch·ªçn tu·∫ßn</label>
            <select className="w-full border rounded-lg px-4 py-2">
              <option>Tu·∫ßn 1 - 30/09 ƒë·∫øn 04/10/2025</option>
              <option>Tu·∫ßn 2 - 07/10 ƒë·∫øn 11/10/2025</option>
            </select>
          </div>
          
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="bg-orange-600 text-white p-4">
              <h3 className="font-semibold">Th·ª±c ƒë∆°n tu·∫ßn 1 - {selectedChild.name}</h3>
            </div>
            <div className="divide-y">
              {['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6'].map((day, idx) => (
                <div key={idx} className="p-4 hover:bg-gray-50">
                  <div className="flex justify-between items-start">
                    <div>
                      <p className="font-semibold text-gray-800">{day} - {30 + idx}/09/2025</p>
                      <p className="text-sm text-gray-600 mt-1">
                        <strong>S√°ng:</strong> B√°nh m√¨ tr·ª©ng, S·ªØa t∆∞∆°i<br/>
                        <strong>Tr∆∞a:</strong> C∆°m, Th·ªãt kho t√†u, Canh rau<br/>
                        <strong>Chi·ªÅu:</strong> X√¥i ƒë·∫≠u xanh, N∆∞·ªõc √©p tr√°i c√¢y
                      </p>
                      {selectedChild.allergies.length > 0 && (
                        <p className="text-xs text-red-600 mt-2">
                          ‚ö†Ô∏è L∆∞u √Ω: Con c√≥ d·ªã ·ª©ng v·ªõi {selectedChild.allergies.join(', ')}
                        </p>
                      )}
                    </div>
                    <ChevronRight className="text-gray-400" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );

  // Send Feedback Component
  const SendFeedback = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">G√≥p √Ω & Ph·∫£n h·ªìi</h2>
      {!selectedChild ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow p-6 space-y-4">
          <h3 className="font-semibold">G·ª≠i ph·∫£n h·ªìi cho {selectedChild.name}</h3>
          <div>
            <label className="block text-sm font-medium mb-2">Ch·ªçn ng√†y</label>
            <input type="date" className="w-full border rounded-lg px-4 py-2" />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Lo·∫°i ph·∫£n h·ªìi</label>
            <select className="w-full border rounded-lg px-4 py-2">
              <option>Ch·∫•t l∆∞·ª£ng m√≥n ƒÉn</option>
              <option>Th√°i ƒë·ªô ph·ª•c v·ª•</option>
              <option>S·ª©c kh·ªèe h·ªçc sinh</option>
              <option>V·ªá sinh an to√†n th·ª±c ph·∫©m</option>
              <option>Kh√°c</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">N·ªôi dung g√≥p √Ω</label>
            <textarea className="w-full border rounded-lg px-4 py-2" rows="5" placeholder="Nh·∫≠p n·ªôi dung ph·∫£n h·ªìi..."></textarea>
          </div>
          <button className="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold hover:bg-purple-700">
            G·ª≠i ph·∫£n h·ªìi
          </button>
        </div>
      )}
    </div>
  );

  // View Invoice Component
  const ViewInvoice = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">Xem h√≥a ƒë∆°n</h2>
      {!selectedChild ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="bg-white rounded-lg shadow p-4">
            <label className="block text-sm font-medium mb-2">Ch·ªçn th√°ng</label>
            <select className="w-full border rounded-lg px-4 py-2">
              <option>Th√°ng 9/2025</option>
              <option>Th√°ng 8/2025</option>
              <option>Th√°ng 7/2025</option>
            </select>
          </div>

          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="bg-yellow-600 text-white p-4">
              <h3 className="font-semibold">H√≥a ƒë∆°n th√°ng 9/2025</h3>
              <p className="text-sm opacity-90">H·ªçc sinh: {selectedChild.name}</p>
            </div>
            <div className="p-6 space-y-4">
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">G√≥i ƒëƒÉng k√Ω</span>
                <span className="font-semibold">G√≥i ƒë·∫ßy ƒë·ªß</span>
              </div>
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">S·ªë ng√†y ƒÉn</span>
                <span className="font-semibold">18/20 ng√†y</span>
              </div>
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">ƒê∆°n gi√°/ng√†y</span>
                <span className="font-semibold">60,000 VNƒê</span>
              </div>
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">S·ªë ti·ªÅn ghi c√≥ (ngh·ªâ ph√©p)</span>
                <span className="font-semibold text-green-600">-120,000 VNƒê</span>
              </div>
              <div className="flex justify-between py-3 bg-gray-50 px-4 rounded-lg">
                <span className="font-bold text-lg">T·ªïng c·ªông</span>
                <span className="font-bold text-lg text-blue-600">1,080,000 VNƒê</span>
              </div>
              <div className="text-center">
                <span className="inline-block bg-green-100 text-green-800 px-4 py-2 rounded-full text-sm font-semibold">
                  ‚úì ƒê√£ thanh to√°n
                </span>
              </div>
              <button className="w-full bg-gray-200 text-gray-800 py-2 rounded-lg hover:bg-gray-300">
                T·∫£i h√≥a ƒë∆°n PDF
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  // Leave Application Component
  const LeaveApplication = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-gray-800">ƒê∆°n xin ngh·ªâ</h2>
      {!selectedChild ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p className="text-yellow-800">Vui l√≤ng ch·ªçn h·ªçc sinh t·ª´ danh s√°ch b√™n tr√°i</p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="bg-white rounded-lg shadow p-6 space-y-4">
            <h3 className="font-semibold">T·∫°o ƒë∆°n xin ngh·ªâ cho {selectedChild.name}</h3>
            <div>
              <label className="block text-sm font-medium mb-2">Ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ</label>
              <input type="date" className="w-full border rounded-lg px-4 py-2" />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Ng√†y k·∫øt th√∫c ngh·ªâ</label>
              <input type="date" className="w-full border rounded-lg px-4 py-2" />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">L√Ω do ngh·ªâ (t√πy ch·ªçn)</label>
              <textarea className="w-full border rounded-lg px-4 py-2" rows="3" placeholder="Nh·∫≠p l√Ω do..."></textarea>
            </div>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-800">
                <strong>L∆∞u √Ω:</strong> S·ªë ti·ªÅn ho√†n tr·∫£ s·∫Ω ƒë∆∞·ª£c ghi c√≥ v√†o h√≥a ƒë∆°n th√°ng k·∫ø ti·∫øp. 
                ƒê∆°n xin ngh·ªâ ph·∫£i ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc th·ªùi gian quy ƒë·ªãnh (cutoff time).
              </p>
            </div>
            <button className="w-full bg-pink-600 text-white py-3 rounded-lg font-semibold hover:bg-pink-700">
              G·ª≠i ƒë∆°n xin ngh·ªâ
            </button>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-4">L·ªãch s·ª≠ ƒë∆°n xin ngh·ªâ</h3>
            <div className="space-y-3">
              <div className="border rounded-lg p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="font-semibold">15/09/2025 - 16/09/2025</p>
                    <p className="text-sm text-gray-600">L√Ω do: ·ªêm</p>
                    <p className="text-sm text-green-600 mt-1">S·ªë ti·ªÅn ho√†n: 120,000 VNƒê</p>
                  </div>
                  <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-semibold">
                    ƒê√£ duy·ªát
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const renderContent = () => {
    switch(activeTab) {
      case 'register': return <RegisterMeal />;
      case 'profile': return <UpdateProfile />;
      case 'health': return <TrackBMI />;
      case 'menu': return <ViewMenu />;
      case 'feedback': return <SendFeedback />;
      case 'invoice': return <ViewInvoice />;
      case 'leave': return <LeaveApplication />;
      default: return <RegisterMeal />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex">
      {/* Sidebar - Children List */}
      <div className={`${sidebarOpen ? 'w-80' : 'w-0'} bg-white shadow-lg transition-all duration-300 overflow-hidden`}>
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-gray-800">Danh s√°ch con</h2>
            <button onClick={() => setSidebarOpen(false)} className="lg:hidden">
              <X className="w-6 h-6" />
            </button>
          </div>
          
          <div className="space-y-3">
            {children.map(child => (
              <div
                key={child.id}
                onClick={() => setSelectedChild(child)}
                className={`p-4 rounded-lg cursor-pointer transition-all ${
                  selectedChild?.id === child.id 
                    ? 'bg-blue-50 border-2 border-blue-500' 
                    : 'bg-gray-50 border-2 border-transparent hover:bg-gray-100'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div className="text-4xl">{child.avatar}</div>
                  <div className="flex-1">
                    <p className="font-semibold text-gray-800">{child.name}</p>
                    <p className="text-sm text-gray-600">L·ªõp {child.class}</p>
                    {child.allergies.length > 0 && (
                      <p className="text-xs text-red-600 mt-1">
                        D·ªã ·ª©ng: {child.allergies.join(', ')}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="px-6 py-4 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button 
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="p-2 hover:bg-gray-100 rounded-lg"
              >
                <Menu className="w-6 h-6" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">Parent Dashboard</h1>
                <p className="text-sm text-gray-600">Qu·∫£n l√Ω b·ªØa ƒÉn h·ªçc ƒë∆∞·ªùng</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button className="p-2 hover:bg-gray-100 rounded-lg relative">
                <Bell className="w-6 h-6 text-gray-600" />
                <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
              </button>
              <div className="flex items-center space-x-2">
                <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold">
                  PH
                </div>
                <div>
                  <p className="font-semibold text-sm">Ph·ª• huynh</p>
                  <p className="text-xs text-gray-600">parent@email.com</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white border-b overflow-x-auto">
          <div className="flex space-x-1 px-6 py-2">
            {menuItems.map(item => (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`flex items-center space-x-2 px-4 py-3 rounded-lg font-medium transition-all whitespace-nowrap ${
                  activeTab === item.id
                    ? 'bg-blue-50 text-blue-600 border border-blue-200'
                    : 'text-gray-600 hover:bg-gray-50'
                }`}
              >
                <item.icon className={`w-5 h-5 ${activeTab === item.id ? item.color : ''}`} />
                <span>{item.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Content Area */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="max-w-5xl mx-auto">
            {renderContent()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ParentDashboard;